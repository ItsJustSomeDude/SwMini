import com.android.build.gradle.tasks.MergeSourceSetFolders
import java.nio.file.Files
import java.nio.file.StandardCopyOption

plugins {
    alias(libs.plugins.android.application)
}

android {
    namespace = 'net.itsjustsomedude.swrdg'
    compileSdk = 35

    buildFeatures {
        prefab = true
    }

    defaultConfig {
        applicationId 'net.itsjustsomedude.swrdg'
        minSdk = 21
        targetSdk = 35
        versionCode 46
        versionName '1.4.9'

        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_SUPPORT_FLEXIBLE_PAGE_SIZES=ON"
            }
        }
        ndk {
            // Vanilla only supports arm, so only build natives for arm.
            //noinspection ChromeOsAbiSupport
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    signingConfigs {
        debug {
            storeFile file(project.property("KEYSTORE_PATH"))
            storePassword project.property("KEYSTORE_PASSWORD")
            keyAlias project.property("KEY_ALIAS")
            keyPassword project.property("KEY_PASSWORD")
        }
        release {
            storeFile file(project.property("KEYSTORE_PATH"))
            storePassword project.property("KEYSTORE_PASSWORD")
            keyAlias project.property("KEY_ALIAS")
            keyPassword project.property("KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig = signingConfigs.release
            minifyEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            vcsInfo.include = false
        }
        debug {
            debuggable true
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    applicationVariants.configureEach { /* com.android.build.gradle.internal.api.ApplicationVariantImpl */ variant ->
        variant.outputs.configureEach { output ->
            if (variant.buildType.name == "release") {
                def appName = "SwordigoMini"
                def versionName = variant.versionName
                def versionCode = variant.versionCode
                outputFileName = "${appName}_${versionName}_${versionCode}.apk"
            }
        }

        // TODO: Create a "mergeMiniAssets" task that does this and the Readme thing.
        variant.mergeAssetsProvider.get().doLast {
            File outputDir = it.outputDir.getAsFile().get()

            // Ok, so we need to merge the `mini_resources` contents into the `resources` folder,
            // then delete `mini_res_src` and `mini_resources`.

            File resourcesDir = new File(outputDir, "resources")
            File compiledRes = new File(outputDir, "res")
            File miniResSrcDir = new File(outputDir, "mini_resources")

            if (compiledRes.exists() && compiledRes.isDirectory() && resourcesDir.exists() && resourcesDir.isDirectory()) {
                File gitignore = new File(compiledRes, ".gitignore")
                if(gitignore.exists()) {
                    delete(gitignore)
                }

                copy {
                    from compiledRes
                    into resourcesDir
                }
            }

            if (miniResSrcDir.exists()) {
                delete(miniResSrcDir)
            }

            if (compiledRes.exists()) {
                delete(compiledRes)
            }
        }
    }
}

dependencies {
    implementation files('libs/renderer.jar')
}

tasks.register("copyGlossHook") {
    Files.copy(
            new File("GlossHook/GlossHook/lib/ARM64/libGlossHook.so").toPath(),
            new File("app/src/main/jniLibs/arm64-v8a/libGlossHook.so").toPath(),
            StandardCopyOption.REPLACE_EXISTING
    )

    Files.copy(
            new File("GlossHook/GlossHook/lib/ARM/libGlossHook.so").toPath(),
            new File("app/src/main/jniLibs/armeabi-v7a/libGlossHook.so").toPath(),
            StandardCopyOption.REPLACE_EXISTING
    )
}

tasks.register("copyReadme") {
    Files.copy(
            new File("README.md").toPath(),
            new File("app/src/main/assets/README_MINI").toPath(),
            StandardCopyOption.REPLACE_EXISTING
    )
}

afterEvaluate {
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += ['-Xlint:deprecation', '-Xlint:unchecked']
    }

    tasks.withType(MergeSourceSetFolders).tap {
        configureEach {
            it.dependsOn copyGlossHook
            it.dependsOn copyReadme
        }
    }
}

apply from: 'extractor.gradle'